{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 li $a0, 10\
	jal push\
	li $a0, 20\
	jal push\
	\
	jal imprimirStack\
	\
	jal pop\
	\
	jal imprimirStack\
	\
	li $v0,10\
	syscall\
\
\
\
\
\
\
\
push:\
	lb $t1, cantidad\
   	addi $t1, $t1, 1\
    	sb $t1, cantidad\
    	\
    	lb $t0, cantidad\
	sll $t0, $t0, 2\
    	\
    	# verificamos que a\'fan haya espacio en la pila\
    	bge $t0, 10, entradaInvalida\
\
    	# calculo la direcci\'f3n de memoria donde se almacenara el valor y guardo\
    	la $a1, stack    \
    	add $t2, $t0, $a1\
    	sw $a0, 0($t2)    \
\
    	jr $ra         \
\
\
pop:\
	\
    	lb $t0, cantidad\
\
    	# Verificamos que la pila no est\'e9 vac\'eda       \
    	beq $t0, 0, entradaInvalida   \
	\
	sll $t0, $t0, 2\
	la $a1, stack\
	add $t0, $t0, $a1\
    	\
    	lw $v0, 0($t0)\
    	\
    	lb $t1, cantidad\
    	addi $t1, $t1, -1\
    	sb $t1, cantidad\
    	\
    	jr $ra     \
    	\
    	\
imprimirStack:\
	li $v0, 4\
	la $a0, str_contenido\
	syscall\
	la $a1, stack\
	lb $t0, cantidad\
	beqz $t0, imp\
	addi $a1, $a1, 4\
	recorrido:\
		li $v0, 4\
		la $a0, str_espacio\
		syscall\
		lw $a0, 0($a1)\
		li $v0, 1\
		syscall\
		addi $a1, $a1, 4\
		addi $t0, $t0, -1\
		bnez $t0, recorrido\
	imp:\
		li $v0, 4\
		la $a0, str_newLine\
		syscall\
		jr $ra\
\
\
Para el main\
Suma: \
	lb $t3, cantidad\
	la $a0, stack\
	ble $t3, 1, entradaInvalida\
	jal pop\
	sw $v0, buffer1\
	jal pop\
	sw $v0, buffer2\
	lw $t0,buffer1\
	lw $t1,buffer2\
	add $a0, $t0, $t1\
	jal push\
\
Resta:\
	lb $t3, cantidad\
	la $a0, stack\
	ble $t3, 1, entradaInvalida\
	jal pop\
	sw $v0, buffer1\
	jal pop\
	sw $v0, buffer2\
	lw $t0,buffer1\
	lw $t1,buffer2\
	sub $a0, $t0, $t1\
	jal push\
\
Multiplicacion:\
	lb $t3, cantidad\
	la $a0, stack\
	ble $t3, 1, entradaInvalida\
	jal pop\
	sw $v0, buffer1\
	jal pop\
	sw $v0, buffer2\
	lw $t0,buffer1\
	lw $t1,buffer2\
	mul $a0, $t0, $t1\
	jal push\
\
Division:\
	lb $t3, cantidad\
	la $a0, stack\
	ble $t3, 1, entradaInvalida\
	jal pop\
	sw $v0, buffer1\
	jal pop\
	sw $v0, buffer2\
	lw $t0,buffer1\
	lw $t1,buffer2\
	div $a0, $t0, $t1\
	jal push\
\
\
\
\
ConvertirEntero:\
	li $t0, 1\
	li $t1, 0\
	\
	lb $t2, 0($a1)\
	beq $t2, 10, devolver\
	addi $a1, $a1, 1\
	\
	lb $t4, 0($a1)\
	beq $t4, 10, unDigito\
	addi $a1, $a1, 1\
	\
	lb $t3, 0($a1)\
	beq $t3, 10, dosDigitos\
	addi $a1, $a1, 1\
	\
	#si el numero es de tres digitos, guardo el primero aca y los otros dos en las etiquetas dosDigitos y unDigito\
	addi $t3, $t3, -48\
	mul $t3, $t3, $t1\
	add $t1, $t1, $t3\
	mul $t0, $t0, 10\
	\
	# si tiene dos digitos primero guardo el digito en $t1 y luego ingresa en unDigito para guardar el que reste\
	dosDigitos:\
		addi $t4, $t4, -48\
		mul $t3, $t3, $t0\
		add $t1, $t1, $t3\
		mul $t0, $t0, 10\
	#si tiene un digito guarda directamente aca\
	unDigito:\
		addi $t2, $t2, -48\
		mul $t2, $t2, $t0\
		add $t1, $t1, $t2\
	devolver:\
		move $v0, $t1\
		jr $ra\
\
\
\
\
	lb $t1, 0($a0)\
	beqz $t1, entradaInvalida\
	\
	beq $t1, 43, Suma\
    	beq $t1, 45, Resta\
    	beq $t1, 42, Multiplicacion\
   	beq $t1, 112, Potencia\
    	beq $t1, 99, limpiarPila\
    	beq $t1, 120, Salir\
    	bge $t1, 48, ConvertirEntero\
	add $a0, $0, $v0\
	jal push\
	jal imprimirStack\
	j main\
\
\
ConvertirEntero:\
	\
	li $t5, 10\
	li $t6, 100\
	li $t1, 0\
	\
	\
	lb $t4, 0($a0)\
	beq $t4, 10, unDigito\
	addi $a0, $a0, 1\
	\
	lb $t3, 0($a0)\
	beq $t3, 10, dosDigitos\
	addi $a0, $a0, 1\
	\
	#si el numero es de tres digitos, guardo el primero aca y los otros dos en las etiquetas dosDigitos y unDigito\
	lb $t0, 0($a0)\
	addi $t0, $t0, -48\
	mul $t0, $t0, $t6\
	add $t1, $t1, $t0\
	\
	# si tiene dos digitos primero guardo el digito en $t1 y luego ingresa en unDigito para guardar el que reste\
	dosDigitos:\
		addi $t3, $t3, -48\
		mul $t3, $t3, $t5\
		add $t1, $t1, $t3\
		\
	#si tiene un digito guarda directamente aca\
	unDigito:\
		addi $t4, $t4, -48\
		mul $t4, $t4, $t0\
		add $t1, $t1, $t2\
	devolver:\
		move $v0, $t1\
		jr $ra}